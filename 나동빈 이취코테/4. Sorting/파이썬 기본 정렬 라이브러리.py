# 파이썬 기본 정렬 라이브러리 : '병합 정렬'과 '삽입 정렬'의 아이디어를 더한 하이브리드 방식의 정렬 알고리즘으로 이루어짐
#                        -> 퀵 정렬과 동작 방식이 비슷한 '병합 정렬' 기반
#                        -> 병합 정렬은 일반적으로 퀵 정렬보다 느리지만, 최악의 경우에도 시간 복잡도 O(NlogN)을 보장한다는 특징이 있음
# 특징 : 리스트, 집합, 딕셔너리 자료형 등을 입력받아 정렬된 결과로 리스트 반환
# 시간 복잡도(= O(NlogN)) : 기본 정렬 라이브러리는 최악의 경우에도 항상 시간 복잡도 O(NlogN)을 보장
# 코딩 테스트의 정렬 알고리즘 3가지 문제 유형 : 
#       1. 정렬 라이브러리로 풀 수 있는 문제 : 별도의 요구가 없다면 단순히 정렬 기법을 알고 있는지 물어보는 문제이므로 '기본 정렬 라이브러리' 사용
#       2. 정렬 알고리즘의 원리에 대해 물어보는 문제 : 선택 정렬, 삽입 정렬, 퀵 정렬 등의 원리를 알고 있어야 문제를 풀 수 있음
#       3. 더 빠른 정렬이 필요한 문제 : '계수 정렬'(데이터의 범위가 한정되어 있을 때) 등 다른 정렬 알고리즘을 이용 or 문제에서 기존에 알려진 알고리즘의 구조적인 개선을 거쳐야 풀 수 있음

##### sorted()
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

result = sorted(array)
print(result)

##### 리스트 객체의 내장 함수 sort() : 내부 원소를 바로 정렬
array = [7, 5, 9, 0, 3, 1, 6, 2, 4, 8]

array.sort()
print(array)

##### key 매개변수를 입력으로 받을 때
# key 값 : '정렬 기준'으로 함수가 들어가야 함
# (ex) 리스트의 데이터가 튜플로 구성되어 있을 때, 각 데이터의 2번째 원소를 기준으로 설정하는 경우
array = [('바나나', 2), ('사과', 5), ('당근', 3)]

def setting(data):
    return data[1]

result = sorted(array, key = setting)
print(result)   # [('바나나', 2), ('당근', 3), ('사과', 5)]